<% /*

      Copyright 2016-2018 Replay SDK (http://www.replay-sdk.com)

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

 */ -%>
<script type="text/javascript">
// Bind form-related events and callbacks
$( document ).ready(function() {
  // Initial setup for required fields
  form_check_required(null);
  // Check required fields when losing focus
  $(".form-control-required:not(.tt-hint)").on('focusout', function(event) {

    form_control_check_required($(event.target));

  });
  $("#_CANCEL").on('click', function(event) {
    // Mark form as cancelled - thus the form will be submitted without checking field values
    $(event.target).closest(".form-horizontal,.form-inline,.form-vertical").addClass("form-cancel");
  });

  // When use type on ESC key, cancel form (click on CANCEL button, if any)
  $("#_FORM_NEW").on('keyup', function(event) {
    if (event.which == 27)  /* Esc */
    {
      $("#_CANCEL").click();
    }
  });
  $("#_FORM_VIEW").on('keyup', function(event) {
    if (event.which == 27) /* Esc */
    {
      $("#_CANCEL").click();
    } else if (event.which == 13) /* Enter */
    {
      $("#_OK").click();
    }
  });
  $("#_FORM_NEW, #FORM_VIEW").on('submit', function(event) {
    var blnSubmit = false;
    var objErrors = null;
    if ($(event.target).hasClass("form-cancel"))
    {
      blnSubmit = true;
    }
    else
    {
      // Recheck all mandatory fields - thus pressing the enter key, which submits forms, provoke a new check of all values (even if focus is not lost)
      form_check_required($(event.target));

      // Get list of controls in error
      objErrors = $(".has-error");
      blnSubmit = (objErrors.length == 0);
    }
    if(blnSubmit)
    {
      // No error: do form submit, but do not send autocomplete fields
      $(".form-dont-submit").prop("disabled", true);
    }
    else
    {
      // There are errors: do not submit form (block callback)
      event.preventDefault();
      // Set focus on first field in error
      if (objErrors)
      {
        $(objErrors.first()).find(".form-control:not(.tt-hint)").focus();
      }
    }
  });
  $("#_ADD").on('click', function(event) {
    // Redirect to new form
    window.location.href = "new";
  });
  $("#_MODIFY").on('click', function(event) {
    // Change form action
    $("#_FORM_VIEW").attr("action", "update");
    // Enable fieldset under form
    $("#_FORM_VIEW > fieldset").prop("disabled", false);
    // Disable Add/Modify/Delete buttons
    $("#_ADD").prop("disabled", true);
    $("#_MODIFY").prop("disabled", true);
    $("#_DELETE").prop("disabled", true);
    $("#_COPY_ADD").prop("disabled", true);
    $("#_COPY_DEL").prop("disabled", true);

    // TODO Disable read-only fields

    // Setup for required fields
    form_check_required(null);

    // Show OK/Cancel buttons
    $("#_OK_CANCEL").removeClass("hidden").addClass("show");
    // Set focus on first field
    form_control_autofocus("#_FORM_VIEW");
  });
  $("#_DELETE").on('click', function(event) {
    // Change form action
    $("#_FORM_VIEW").attr("action", "delete");
    // Let fieldset disabled
    // Disable Add/Modify/Delete buttons
    $("#_ADD").prop("disabled", true);
    $("#_MODIFY").prop("disabled", true);
    $("#_DELETE").prop("disabled", true);
    $("#_COPY_ADD").prop("disabled", true);
    $("#_COPY_DEL").prop("disabled", true);
    // Show OK/Cancel buttons
    $("#_OK_CANCEL").removeClass("hidden").addClass("show");
    // TODO Show message asking for confirmation
  });

  // Make clickable rows in tables - if they have the valid HTML5 attribute "data-href"
  $('tr[data-href]').click(function(){
    window.document.location = $(this).data("href");
  });

  // Prepare popover on image (if any)
  $("#_IMG_BUTTON").popover({
    html: true,
    trigger: 'click',
    content: function () {
      return '<img src="'+$(this).data('img') + '" />';
    }} /* options */);

  // Set focus automatically
  form_control_autofocus(null /* strCSSParent */);
});

// Compute focus automatically and enforce it : Set focus on first visible enabled field
function form_control_autofocus(strCSSParent)
{
  if (strCSSParent == null)
  {
    strCSSParent = "body";
  }
  // First, Try to find a non-typeahead field
  var objFocus = $(strCSSParent).find(".form-control:not(.tt-hint):enabled:visible:first");
  if (objFocus && objFocus.length == 0)
  {
    // WARNING: workaround typeahead limitation: Try to find typeahead field (the one with class tt-input)
    objFocus = $(strCSSParent).find(".form-control.tt-input:enabled:visible:first");
  }
  objFocus.focus();
}
function form_check_required(objFormControls)
{
  if (objFormControls == null)
  {
    objFormControls = $(".form-control-required:not(.tt-hint)");
  }
  else
  {
    objFormControls = objFormControls.find(".form-control-required:not(.tt-hint)");
  }
  objFormControls.each(function(index) {
    // Validate required field: MUST NOT be empty on focus out (otherwise we set the error class)
    form_control_check_required($(this));
  });
}
function form_control_check_required(objFormControl)
{
  var strDataFormControlAutocomplete = objFormControl.data("form-control-autocomplete");
  var strValue = "";
  if (strDataFormControlAutocomplete)
  {
    // Validation based on hidden text field - filled by autocomplete callback
    strValue = $("#"+strDataFormControlAutocomplete).val();
  }
  else
  {
    // Standard validation of required field: MUST NOT be empty (otherwise we set the error class)
    strValue = objFormControl.val();
  }

  // Cleanup value from trailing spaces
  strValue = strValue.replace(/^ +/g, "").replace(/ +$/g, "");
  // Set control state/class based on value (must not be empty)
  form_control_set_error(objFormControl, (strValue == "") /* blnError */);
}

function form_control_set_error(objFormControl, blnError)
{
  if (blnError)
  {
    objFormControl.parent().addClass("has-error").removeClass("has-success has-warning");
  }
  else
  {
    objFormControl.parent().removeClass("has-error has-warning").addClass("has-success");
  }
}
</script>
